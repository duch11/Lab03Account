using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Lab03Account
{
    class AccountManager
    {
        private static int currentAccNumber;
        private Account[] accounts;
        private int maxAccounts;

        public AccountManager(int seed, int maxAcc)
        {
            maxAccounts = maxAcc;
            accounts = new Account[maxAcc];
            if (seed > 0)
            {
                for(currentAccNumber = 0; currentAccNumber<seed; currentAccNumber++)
                {
                    if(!addAccount("AutoGeneratedAccount", 0.0))
                    {
                        break;
                    }
                }
            }
            
        }

        public bool addAccount(string name, double balance)
        {
            if(currentAccNumber < 10)
            {
                accounts[currentAccNumber] = new Account(currentAccNumber + 1, name, balance);
                return true;
            } else
            {
                Console.WriteLine("Not enough space");
                return false;
            }
        }

        private int findAccount(int accNum)
        {
            for(int i = 0; i < currentAccNumber; i++)
            {
                if(accounts[i].getAccountNumber() == accNum)
                {
                    return i;
                } 
            }
            return -1;
        }

        public bool deposit(int accNum, double amt)
        {
            int indexOfAccount = findAccount(accNum);
            if(indexOfAccount != -1)
            {
                accounts[indexOfAccount].deposit(amt);
                return true;
            }
            else
            {
                return false;
            }
        }

        public bool withdraw(int accNum, double amt)
        {
            int indexOfAccount = findAccount(accNum);
            if (indexOfAccount != -1)
            {
                accounts[indexOfAccount].withdraw(amt);
                return true;
            }
            else
            {
                return false;
            }
        }

        public bool transfer(int accNum, int toAccNum, double amt)
        {
            int indexOfAccount = findAccount(accNum);
            int indexOfToAccount = findAccount(toAccNum);
            if(indexOfAccount != -1 && indexOfToAccount != -1)
            {
                return accounts[indexOfAccount].transfer(accounts[indexOfToAccount], amt);
            }
            else
            {
                return false;
            }
        }

        public string printAccount(int accNum)
        {
            return accounts[accNum--].ToString();
        }


        override public string ToString()
        {
            string accountsString = "Accounts (" + currentAccNumber + ") in " + this.GetType();
            foreach (Account a in accounts)
            {
                
                if (a != null)
                {
                    accountsString = accountsString + "\n" + "[ " + a + " ]";
                } else
                {
                    accountsString = accountsString + "\n" + "[ NULL ]";
                }
                
            }
            return accountsString;
        }
    }
}
